# GitHub Copilot Agent Environment Configuration
# This file configures the agent environment for the switchaja repository
# Documentation: https://docs.github.com/en/copilot/how-tos/use-copilot-agents/coding-agent/customize-the-agent-environment

# MCP (Model Context Protocol) servers for enhanced context
mcp:
  servers:
    godoc:
      command: godoc-mcp
      env:
        GO_MODULE_ROOT: .
        GOPATH: /home/runner/go

# Project information and context
project:
  name: switchaja
  description: IoT PlayStation Rental Management System
  type: go_web_application
  
  # Key technologies used in the project
  technologies:
    - Go 1.24+
    - Fiber web framework
    - SQLite database
    - MQTT protocol
    - WebSocket real-time updates
    - IoT device control
    
  # Important directories and their purposes
  structure:
    cmd/server: Main application entry point
    internal/config: Configuration management
    internal/api: HTTP API handlers and routes
    internal/iot: MQTT and IoT device integration
    internal/db: Database models and operations
    web/static: Frontend web assets
    test: Test files and utilities

# Development environment setup
development:
  # Primary tools used for development
  tools:
    - go
    - make
    
  # Key configuration files
  key_files:
    - go.mod
    - Makefile
    - README.md
    - internal/config/config.go
    - cmd/server/main.go
    
  # Environment variables for configuration
  environment:
    PORT: Server port (default 8080)
    DB_PATH: Database file path (default heheswitch.db)
    SQLITE_MODE: SQLite performance mode (default balanced)
    MQTT_BROKER: MQTT broker URL for IoT device communication
    MQTT_PREFIX: MQTT topic prefix (default ps)
    MQTT_USERNAME: MQTT authentication username
    MQTT_PASSWORD: MQTT authentication password
    MQTT_CLIENT_ID: MQTT client identifier
    
  # Code patterns and conventions
  conventions:
    - Use Go modules for dependency management
    - Follow clean architecture principles with separate layers
    - Use structured logging for debugging
    - Implement comprehensive error handling
    - Write unit tests for business logic
    - Use environment variables for configuration
    - Follow Go naming conventions and best practices